{"version":3,"sources":["redux/reducers/urlReducer.js","redux/reducers/userReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/errorsReducer.js","redux/reducers/index.js","redux/sagas/urlSaga.js","redux/sagas/userSaga.js","redux/sagas/registrationSaga.js","redux/sagas/loginSaga.js","redux/sagas/index.js","components/TinyURL/TinyURL.js","components/Login/Login.js","components/SignUp/SignUp.js","components/ProtectedRoute/ProtectedRoute.js","components/Chiisai/Chiisai.js","components/App/App.js","index.js"],"names":["urlReducer","state","arguments","length","undefined","action","type","payload","userReducer","loginMode","combineReducers","loginMessage","registrationMessage","rootReducer","urlData","user","errors","addURL","fetchURLData","urlSaga","regenerator_default","a","wrap","_context","prev","next","axios","post","put","t0","console","log","stop","_marked","response","_context2","get","sent","data","_marked2","_context3","takeLatest","_marked3","fetchUser","userSaga","config","headers","Content-Type","withCredentials","userSaga_marked","userSaga_marked2","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","loginUser","logoutUser","loginSaga","status","loginSaga_marked","loginSaga_marked2","loginSaga_marked3","rootSaga","all","sagas_marked","TinyURL","originalURL","showErrorMessage","handleInputChange","propertyName","event","_this","setState","Object","defineProperty","target","value","handleFormSubmit","preventDefault","validateURL","userInput","test","props","dispatch","this","_this2","react_default","createElement","align","onClick","onSubmit","required","onChange","map","url","index","key","original_URL","href","concat","id","rel","hit_count","Component","connect","LoginPage","username","password","login","handleInputChangeFor","pattern","title","name","withRouter","SignUp","confirmPassword","label","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Login","react_router","assign","Chiisai","App","react_router_dom","components_ProtectedRoute_ProtectedRoute","path","exact","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","es","components_App_App","document","getElementById"],"mappings":"qNAaiBA,SAbE,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvC,OAAQC,EAAOC,MACb,IAAK,eACH,OAAOD,EAAOE,QAChB,IAAK,iBACH,MAAO,GACT,QACE,OAAON,KCMEO,EAbG,WAAwB,IAAvBP,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxC,OAAQC,EAAOC,MACb,IAAK,WACH,OAAOD,EAAOE,QAChB,IAAK,aACH,MAAO,GACT,QACE,OAAON,ICMEQ,EAbC,WAAgC,IAA/BR,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,WACvB,QAD8CA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC/BE,MACb,IAAK,oBACH,MAAO,QACT,IAAK,uBACH,MAAO,WACT,QACE,OAAOL,ICgCAS,cAAgB,CAC3BC,aApCiB,WAAwB,IAAvBV,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAC1B,QADyCA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC1BE,MACX,IAAK,oBACD,MAAO,GACX,IAAK,oBACD,MAAO,oCACX,IAAK,eACD,MAAO,2DACX,IAAK,uBACD,MAAO,qDACX,QACI,OAAOL,IA0BfW,oBApBwB,WAAwB,IAAvBX,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GACjC,QADgDA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACjCE,MACX,IAAK,2BACD,MAAO,GACX,IAAK,2BACD,MAAO,kCACX,IAAK,8BACD,qCACJ,IAAK,sBACD,MAAO,0EACX,QACI,OAAOL,MCZJY,EAPKH,YAAgB,CAChCI,UACAC,OACAN,YACAO,8DCbMC,cAUAC,cAYAC,GAtBV,SAAUF,EAAOZ,GAAjB,OAAAe,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGQ,OAHRF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGcC,IAAMC,KAAK,UAAWtB,EAAOE,SAH3C,OAIQ,OAJRgB,EAAAE,KAAA,EAIcG,YAAI,CAAEtB,KAAM,mBAJ1B,OAAAiB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAMQO,QAAQC,IAAI,sCAAZR,EAAAM,IANR,yBAAAN,EAAAS,SAAAC,EAAA,cAUA,SAAUf,IAAV,IAAAgB,EAAA,OAAAd,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAGyB,OAHzBU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAG+BC,IAAMU,IAAI,WAHzC,OAKQ,OAFMF,EAHdC,EAAAE,KAAAF,EAAAV,KAAA,EAKcG,YAAI,CAAEtB,KAAM,eAAgBC,QAAS2B,EAASI,OAL5D,OAAAH,EAAAV,KAAA,gBAAAU,EAAAX,KAAA,EAAAW,EAAAN,GAAAM,EAAA,SAOQL,QAAQC,IAAI,8BAAZI,EAAAN,IAPR,yBAAAM,EAAAH,SAAAO,EAAA,cAYA,SAAUpB,IAAV,OAAAC,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACI,OADJe,EAAAf,KAAA,EACUgB,YAAW,gBAAiBxB,GADtC,OAEI,OAFJuB,EAAAf,KAAA,EAEUgB,YAAW,iBAAkBvB,GAFvC,wBAAAsB,EAAAR,SAAAU,GAKevB,mBC3BLwB,cAsBAC,GAtBV,SAAUD,IAAV,IAAAE,EAAAX,EAAA,OAAAd,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAWuB,OAXvBF,EAAAC,KAAA,EAEYqB,EAAS,CACbC,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAJzBzB,EAAAE,KAAA,EAW6BC,IAAMU,IAAI,WAAYS,GAXnD,OAgBM,OALMX,EAXZX,EAAAc,KAAAd,EAAAE,KAAA,EAgBYG,YAAI,CAAEtB,KAAM,WAAYC,QAAS2B,EAASI,OAhBtD,OAAAf,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAkBMO,QAAQC,IAAI,0BAAZR,EAAAM,IAlBN,yBAAAN,EAAAS,SAAAiB,EAAA,cAsBA,SAAUL,IAAV,OAAAxB,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OACE,OADFU,EAAAV,KAAA,EACQgB,YAAW,aAAcE,GADjC,wBAAAR,EAAAH,SAAAkB,GAIeN,mBC1BLO,cAoBAC,GApBV,SAAUD,EAAa9C,GAAvB,OAAAe,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGI,OAHJF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGUG,YAAI,CAAEtB,KAAM,6BAHtB,OAMI,OANJiB,EAAAE,KAAA,EAMUC,IAAMC,KAAK,oBAAqBtB,EAAOE,SANjD,OASI,OATJgB,EAAAE,KAAA,EASUG,YAAI,CAAEtB,KAAM,QAASC,QAASF,EAAOE,UAT/C,OAaI,OAbJgB,EAAAE,KAAA,EAaUG,YAAI,CAACtB,KAAM,sBAbrB,OAAAiB,EAAAE,KAAA,iBAgBM,OAhBNF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAeMO,QAAQC,IAAI,gCAAZR,EAAAM,IAfNN,EAAAE,KAAA,GAgBYG,YAAI,CAACtB,KAAM,wBAhBvB,yBAAAiB,EAAAS,SAAAqB,EAAA,eAoBA,SAAUD,IAAV,OAAAhC,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OACE,OADFU,EAAAV,KAAA,EACQgB,YAAW,WAAYU,GAD/B,wBAAAhB,EAAAH,SAAAsB,GAIeF,mBCxBLG,cAkCAC,cAwBAC,GA1DV,SAAUF,EAAUlD,GAApB,IAAAwC,EAAA,OAAAzB,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGQ,OAHRF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGcG,YAAI,CAAEtB,KAAM,sBAH1B,OAaQ,OARMuC,EAAS,CACXC,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAP7BzB,EAAAE,KAAA,EAacC,IAAMC,KAAK,iBAAkBtB,EAAOE,QAASsC,GAb3D,OAiBQ,OAjBRtB,EAAAE,KAAA,EAiBcG,YAAI,CAAEtB,KAAM,eAjB1B,OAAAiB,EAAAE,KAAA,oBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAmBQO,QAAQC,IAAI,yBAAZR,EAAAM,IAC8B,MAA1BN,EAAAM,GAAMK,SAASwB,OApB3B,CAAAnC,EAAAE,KAAA,SAwBY,OAxBZF,EAAAE,KAAA,GAwBkBG,YAAI,CAAEtB,KAAM,iBAxB9B,QAAAiB,EAAAE,KAAA,iBA4BY,OA5BZF,EAAAE,KAAA,GA4BkBG,YAAI,CAAEtB,KAAM,yBA5B9B,yBAAAiB,EAAAS,SAAA2B,EAAA,eAkCA,SAAUH,EAAWnD,GAArB,IAAAwC,EAAA,OAAAzB,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAWQ,OAXRU,EAAAX,KAAA,EAEcqB,EAAS,CACXC,QAAS,CAAEC,eAAgB,oBAC3BC,iBAAiB,GAJ7Bb,EAAAV,KAAA,EAWcC,IAAMC,KAAK,kBAAmBkB,GAX5C,OAgBQ,OAhBRV,EAAAV,KAAA,EAgBcG,YAAI,CAAEtB,KAAM,eAhB1B,OAiBQ,OAjBR6B,EAAAV,KAAA,EAiBcG,YAAI,CAAEtB,KAAM,oBAjB1B,OAAA6B,EAAAV,KAAA,iBAAAU,EAAAX,KAAA,GAAAW,EAAAN,GAAAM,EAAA,SAoBQL,QAAQC,IAAI,0BAAZI,EAAAN,IApBR,yBAAAM,EAAAH,SAAA4B,EAAA,eAwBA,SAAUH,IAAV,OAAArC,EAAAC,EAAAC,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACI,OADJe,EAAAf,KAAA,EACUgB,YAAW,QAASc,GAD9B,OAEI,OAFJf,EAAAf,KAAA,EAEUgB,YAAW,SAAUe,GAF/B,wBAAAhB,EAAAR,SAAA6B,GAKeJ,mBCtDUK,GAAV,SAAUA,IAAV,OAAA1C,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPsC,YAAI,CACR5C,IACAyB,IACAQ,IACAK,MALW,wBAAAlC,EAAAS,SAAAgC,+ECVTC,8MAOFhE,MAAQ,CACJiE,YAAa,GACbC,kBAAkB,KAGtBC,kBAAoB,SAAAC,GAAY,OAAI,SAAAC,GAChCC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAeC,EAAMK,OAAOC,YAIrCC,iBAAmB,SAACP,GAChBA,EAAMQ,iBACNP,EAAKQ,YAAYR,EAAKtE,MAAMiE,gBAGhCa,YAAc,SAACC,GAGE,+aACFC,KAFGD,IAGVT,EAAKC,SAAS,CACVL,kBAAkB,IAEtBI,EAAKW,MAAMC,SAAS,CAChB7E,KAAM,gBACNC,QAAS,CACL2D,YAAaK,EAAKtE,MAAMiE,eAGhCpC,QAAQC,IAAI,eAEZwC,EAAKC,SAAS,CACVN,YAAa,OAGjBK,EAAKC,SAAS,CACVL,kBAAkB,IAEtBrC,QAAQC,IAAI,qGA5ChBqD,KAAKF,MAAMC,SAAS,CAChB7E,KAAM,oDA+CL,IAAA+E,EAAAD,KACL,OACIE,EAAAjE,EAAAkE,cAAA,OAAKC,MAAM,UACPF,EAAAjE,EAAAkE,cAAA,kBACAD,EAAAjE,EAAAkE,cAAA,UACIE,QAAS,kBAAMJ,EAAKH,MAAMC,SAAS,CAAE7E,KAAM,aAD/C,YAKAgF,EAAAjE,EAAAkE,cAAA,QAAMG,SAAUN,KAAKP,kBACjBS,EAAAjE,EAAAkE,cAAA,SAAOI,UAAQ,EAACf,MAAOQ,KAAKnF,MAAMiE,YAAa0B,SAAUR,KAAKhB,kBAAkB,kBAC/C,IAAhCgB,KAAKnF,MAAMkE,kBAA6BmB,EAAAjE,EAAAkE,cAAA,+CACzCD,EAAAjE,EAAAkE,cAAA,UAAQX,MAAM,SAAStE,KAAK,UAA5B,eAEJgF,EAAAjE,EAAAkE,cAAA,aACID,EAAAjE,EAAAkE,cAAA,aACID,EAAAjE,EAAAkE,cAAA,UACID,EAAAjE,EAAAkE,cAAA,0BACAD,EAAAjE,EAAAkE,cAAA,sBACAD,EAAAjE,EAAAkE,cAAA,yBAGPH,KAAKF,MAAMpE,QAAQX,OAAS,GAC7BmF,EAAAjE,EAAAkE,cAAA,aAEKH,KAAKF,MAAMpE,QAAQ+E,IAAI,SAACC,EAAKC,GAAN,OACpBT,EAAAjE,EAAAkE,cAAA,MAAIS,IAAKD,GACLT,EAAAjE,EAAAkE,cAAA,UACID,EAAAjE,EAAAkE,cAAA,SAAIO,EAAIG,eAEZX,EAAAjE,EAAAkE,cAAA,UACID,EAAAjE,EAAAkE,cAAA,KAAGW,KAAI,yCAAAC,OAA2CL,EAAIM,IAAMC,IAAI,sBAAsB1B,OAAO,UAA7F,yCAC2CmB,EAAIM,KAGnDd,EAAAjE,EAAAkE,cAAA,UAAKO,EAAIQ,wBArFnBC,aAoGPC,eAJS,SAAAvG,GAAK,MAAK,CAC9Ba,QAASb,EAAMa,UAGJ0F,CAAyBvC,aCnGlCwC,8MAEFxG,MAAQ,CACJyG,SAAU,GACVC,SAAU,MAGdC,MAAQ,SAACtC,GACLA,EAAMQ,iBAEFP,EAAKtE,MAAMyG,UAAYnC,EAAKtE,MAAM0G,SAClCpC,EAAKW,MAAMC,SAAS,CAChB7E,KAAM,QACNC,QAAS,CACLmG,SAAUnC,EAAKtE,MAAMyG,SACrBC,SAAUpC,EAAKtE,MAAM0G,YAI7BpC,EAAKW,MAAMC,SAAS,CAAE7E,KAAM,yBAIpCuG,qBAAuB,SAAAxC,GAAY,OAAI,SAACC,GACpCC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAeC,EAAMK,OAAOC,kFAI5B,IAAAS,EAAAD,KAEL,OACIE,EAAAjE,EAAAkE,cAAA,OAAKC,MAAM,UACNJ,KAAKF,MAAMlE,OAAOL,cACf2E,EAAAjE,EAAAkE,cAAA,UAEKH,KAAKF,MAAMlE,OAAOL,cAG3B2E,EAAAjE,EAAAkE,cAAA,8DAIAD,EAAAjE,EAAAkE,cAAA,QAAMG,SAAUN,KAAKwB,OACjBtB,EAAAjE,EAAAkE,cAAA,sBACAD,EAAAjE,EAAAkE,cAAA,kBACAD,EAAAjE,EAAAkE,cAAA,SACII,UAAQ,EACRrF,KAAK,QACLsE,MAAOQ,KAAKnF,MAAMyG,SAClBd,SAAUR,KAAKyB,qBAAqB,cAExCvB,EAAAjE,EAAAkE,cAAA,qBACAD,EAAAjE,EAAAkE,cAAA,SACIjF,KAAK,WACLwG,QAAQ,QACRnB,UAAQ,EAACoB,MAAM,uBACfnC,MAAOQ,KAAKnF,MAAM0G,SAClBf,SAAUR,KAAKyB,qBAAqB,cAExCvB,EAAAjE,EAAAkE,cAAA,WACAD,EAAAjE,EAAAkE,cAAA,UAAQjF,KAAK,SAAS0G,KAAK,UAA3B,YAIJ1B,EAAAjE,EAAAkE,cAAA,YAEAD,EAAAjE,EAAAkE,cAAA,cACID,EAAAjE,EAAAkE,cAAA,UACIjF,KAAK,SACLmF,QAAS,WACLJ,EAAKH,MAAMC,SAAS,CAAE7E,KAAM,2BAHpC,oBApEIiG,aAyFTU,eAAWT,YAJF,SAAAvG,GAAK,MAAK,CAC9Be,OAAQf,EAAMe,SAGQwF,CAAyBC,KCzF7CS,8MAEFjH,MAAQ,CACJyG,SAAU,GACVC,SAAU,GACVQ,gBAAiB,MAGrBN,qBAAuB,SAAAxC,GAAY,OAAI,SAACC,GACpCC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAeC,EAAMK,OAAOC,YAIrCzB,aAAe,SAACmB,GACZA,EAAMQ,iBAEFP,EAAKtE,MAAMyG,UAAYnC,EAAKtE,MAAM0G,UAAYpC,EAAKtE,MAAM0G,WAAapC,EAAKtE,MAAMkH,gBACjF5C,EAAKW,MAAMC,SAAS,CAChB7E,KAAM,WACNC,QAAS,CACLmG,SAAUnC,EAAKtE,MAAMyG,SACrBC,SAAUpC,EAAKtE,MAAM0G,YAGtBpC,EAAKtE,MAAM0G,WAAapC,EAAKtE,MAAMkH,gBAC1C5C,EAAKW,MAAMC,SAAS,CAAE7E,KAAM,gCAE5BiE,EAAKW,MAAMC,SAAS,CAAE7E,KAAM,sGAI3B,IAAA+E,EAAAD,KACL,OACIE,EAAAjE,EAAAkE,cAAA,OAAKC,MAAM,UACNJ,KAAKF,MAAMlE,OAAOJ,qBACf0E,EAAAjE,EAAAkE,cAAA,UAEKH,KAAKF,MAAMlE,OAAOJ,qBAG3B0E,EAAAjE,EAAAkE,cAAA,QAAMG,SAAUN,KAAKjC,cACjBmC,EAAAjE,EAAAkE,cAAA,qBACAD,EAAAjE,EAAAkE,cAAA,kBACAD,EAAAjE,EAAAkE,cAAA,SACIjF,KAAK,QACL8G,MAAM,QACNxC,MAAOQ,KAAKnF,MAAMyG,SAClBd,SAAUR,KAAKyB,qBAAqB,YACpClB,UAAQ,IAEZL,EAAAjE,EAAAkE,cAAA,qBAAYD,EAAAjE,EAAAkE,cAAA,mCACZD,EAAAjE,EAAAkE,cAAA,SACIjF,KAAK,WACLwG,QAAQ,QACRnB,UAAQ,EAACoB,MAAM,uBACfK,MAAM,WACNxC,MAAOQ,KAAKnF,MAAM0G,SAClBf,SAAUR,KAAKyB,qBAAqB,cAExCvB,EAAAjE,EAAAkE,cAAA,6BACAD,EAAAjE,EAAAkE,cAAA,SACIjF,KAAK,WACLwG,QAAQ,QACRnB,UAAQ,EAACoB,MAAM,uBACfK,MAAM,kBACNxC,MAAOQ,KAAKnF,MAAMkH,gBAClBvB,SAAUR,KAAKyB,qBAAqB,qBAExCvB,EAAAjE,EAAAkE,cAAA,WACAD,EAAAjE,EAAAkE,cAAA,UACIjF,KAAK,SACL0G,KAAK,SACLpC,MAAM,YAHV,YASJU,EAAAjE,EAAAkE,cAAA,YACAD,EAAAjE,EAAAkE,cAAA,cACID,EAAAjE,EAAAkE,cAAA,UACIjF,KAAK,SACLmF,QAAS,WAAOJ,EAAKH,MAAMC,SAAS,CAAC7E,KAAM,wBAF/C,oBAjFCiG,aAkGNC,eAJS,SAAAvG,GAAK,MAAK,CAC9Be,OAAQf,EAAMe,SAGHwF,CAAyBU,IC7CzBV,eAPS,SAACvG,GACvB,MAAO,CACLc,KAAMd,EAAMc,KACZN,UAAWR,EAAMQ,YAIN+F,CA/CQ,SAACtB,GAAU,IAW5BmC,EANSC,EAITpC,EAJFqC,UACAxG,EAGEmE,EAHFnE,KACAN,EAEEyE,EAFFzE,UACG+G,EAR2B/C,OAAAgD,GAAA,EAAAhD,CAS5BS,EAT4B,kCA4BhC,OAZEmC,EAHCtG,EAAKqF,GAGYkB,EACK,UAAd7G,EAGSiH,GAIAR,GAKhB5B,EAAAjE,EAAAkE,cAACoC,EAAA,EAADlD,OAAAmD,OAAA,GAGMJ,EAHN,CAIED,UAAWF,OCxCbQ,+LAEEzC,KAAKF,MAAMC,SAAS,CAChB7E,KAAM,uDAKV,OACIgF,EAAAjE,EAAAkE,cAAA,WACID,EAAAjE,EAAAkE,cAAA,8BAVMgB,aCUhBuB,IDOStB,cAAUqB,gMCLrBzC,KAAKF,MAAMC,SAAS,CAAE7E,KAAM,gDAI5B,OACEgF,EAAAjE,EAAAkE,cAAA,WACED,EAAAjE,EAAAkE,cAACwC,EAAA,EAAD,KACEzC,EAAAjE,EAAAkE,cAAA,WACED,EAAAjE,EAAAkE,cAACoC,EAAA,EAAD,KAOErC,EAAAjE,EAAAkE,cAACyC,GAAD,CAAgBC,KAAK,IAAIC,OAAK,EAACX,UAAWtD,KAM1CqB,EAAAjE,EAAAkE,cAACoC,EAAA,EAAD,CAAOQ,OAAQ,kBAAM7C,EAAAjE,EAAAkE,cAAA,+BAvBjBgB,cAgCHC,iBAAUsB,ICjCnBM,GAAiBC,cAKjBC,GAEJ,CAACF,IAEGG,GAAQC,YAGZ3H,EAEA4H,IAAeC,WAAf,EAAmBJ,KAKrBF,GAAeO,IAAI7E,GAEnB8E,IAAST,OACP7C,EAAAjE,EAAAkE,cAACsD,EAAA,EAAD,CAAUN,MAAOA,IACfjD,EAAAjE,EAAAkE,cAACuD,GAAD,OAEFC,SAASC,eAAe","file":"static/js/main.3c123769.chunk.js","sourcesContent":["const urlReducer = (state = {}, action) => {\n    switch (action.type) {\n      case 'SET_URL_DATA':\n        return action.payload;\n      case 'CLEAR_URL_DATA':\n        return [];\n      default:\n        return state;\n    }\n  };\n  \n  // url data will be on the redux state at:\n  // state.urlData\n  export default urlReducer;\n  ","const userReducer = (state = {}, action) => {\n    switch (action.type) {\n      case 'SET_USER':\n        return action.payload;\n      case 'UNSET_USER':\n        return {};\n      default:\n        return state;\n    }\n  };\n  \n  // user will be on the redux state at:\n  // state.user\n  export default userReducer;\n","const loginMode = (state = 'register', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n    switch (action.type) {\n        case 'CLEAR_LOGIN_ERROR':\n            return '';\n        case 'LOGIN_INPUT_ERROR':\n            return 'Enter your username and password!';\n        case 'LOGIN_FAILED':\n            return 'Oops! The username and password didn\\'t match. Try again!';\n        case 'LOGIN_FAILED_NO_CODE':\n            return 'Oops! Something went wrong! Is the server running?';\n        default:\n            return state;\n    }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n    switch (action.type) {\n        case 'CLEAR_REGISTRATION_ERROR':\n            return '';\n        case 'REGISTRATION_INPUT_ERROR':\n            return 'Choose a username and password!';\n        case 'REGISTRATION_PASSWORD_ERROR':\n            return `Oops! Passwords don't match.`;\n        case 'REGISTRATION_FAILED':\n            return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n        default:\n            return state;\n    }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n    loginMessage,\n    registrationMessage,\n});","import { combineReducers } from 'redux';\nimport urlData from './urlReducer'\nimport user from './userReducer'\nimport loginMode from './loginModeReducer';\nimport errors from './errorsReducer';\n\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// It is made a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n    urlData, // will store URL data in redux state \n    user, // will have an id and username if someone is logged in\n    loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n    errors, // contains registrationMessage and loginMessage\n});\n\nexport default rootReducer;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on 'SEND_URL_DATA' actions\nfunction* addURL(action) {\n    try {\n        // sends URL data to the server\n        yield axios.post('api/url', action.payload);\n        yield put({ type: 'FETCH_URL_DATA' });\n    } catch (error) {\n        console.log('Error with URL data POST to server:', error);\n    }\n}\n\nfunction* fetchURLData() {\n    try {\n        // retrieve URL data from the server\n        const response = yield axios.get('api/url');\n\n        yield put({ type: 'SET_URL_DATA', payload: response.data });\n    } catch (error) {\n        console.log('URL data get request failed', error);\n    }\n}\n\n\nfunction* urlSaga() {\n    yield takeLatest('SEND_URL_DATA', addURL);\n    yield takeLatest('FETCH_URL_DATA', fetchURLData);\n}\n\nexport default urlSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n    try {\n      const config = {\n        headers: { 'Content-Type': 'application/json' },\n        withCredentials: true,\n      };\n  \n      // the config includes credentials which\n      // allow the server session to recognize the user\n      // If a user is logged in, this will return their information\n      // from the server session (req.user)\n      const response = yield axios.get('api/user', config);\n  \n      // now that the session has given us a user object\n      // with an id and username set the client-side user object to let\n      // the client-side code know the user is logged in\n      yield put({ type: 'SET_USER', payload: response.data });\n    } catch (error) {\n      console.log('User get request failed', error);\n    }\n  }\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n    try {\n        // clear any existing error on the login page\n        yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n\n        // send the action.payload as the body\n        // the config includes credentials which\n        // allow the server session to recognize the user\n        yield axios.post('api/user/login', action.payload, config);\n\n        // after the user has logged in\n        // get the user information from the server\n        yield put({ type: 'FETCH_USER' });\n    } catch (error) {\n        console.log('Error with user login:', error);\n        if (error.response.status === 401) {\n            // The 401 is the error status sent from passport\n            // if user isn't in the database or\n            // if the username and password don't match in the database\n            yield put({ type: 'LOGIN_FAILED' });\n        } else {\n            // Got an error that wasn't a 401\n            // Could be anything, but most common cause is the server is not started\n            yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n        }\n    }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n\n        // the config includes credentials which\n        // allow the server session to recognize the user\n        // when the server recognizes the user session\n        // it will end the session\n        yield axios.post('api/user/logout', config);\n\n        // now that the session has ended on the server\n        // remove the client-side user object to let\n        // the client-side code know the user is logged out\n        yield put({ type: 'UNSET_USER' });\n        yield put({ type: 'CLEAR_USER_DATA' });\n\n    } catch (error) {\n        console.log('Error with user logout:', error);\n    }\n}\n\nfunction* loginSaga() {\n    yield takeLatest('LOGIN', loginUser);\n    yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { all } from 'redux-saga/effects';\nimport urlSaga from './urlSaga'\nimport userSaga from './userSaga'\nimport registrationSaga from './registrationSaga'\nimport loginSaga from './loginSaga'\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    urlSaga(),\n    userSaga(),\n    registrationSaga(),\n    loginSaga(),\n  ]);\n}","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nclass TinyURL extends Component {\n    componentDidMount(){\n        this.props.dispatch({\n            type: 'FETCH_URL_DATA'\n        })\n    }\n\n    state = {\n        originalURL: \"\",\n        showErrorMessage: false,\n    }\n\n    handleInputChange = propertyName => event => {\n        this.setState({\n            [propertyName]: event.target.value\n        });\n    };\n\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        this.validateURL(this.state.originalURL)\n    }\n\n    validateURL = (userInput) => {\n        // use .test and regex to validate that the string is a URL\n        let longURL = userInput;\n        let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n        if (regexp.test(longURL)) {\n            this.setState({\n                showErrorMessage: false\n            })\n            this.props.dispatch({\n                type: 'SEND_URL_DATA', \n                payload: {\n                    originalURL: this.state.originalURL,\n                }\n            })\n            console.log(\"URL valid!!\");\n            // clear originalURL if URL is valid and sent\n            this.setState({\n                originalURL: ''\n            })\n        } else {\n            this.setState({\n                showErrorMessage: true\n            })\n            console.log(\"URL invalid!\");\n        }\n    }\n\n    render() {\n        return (\n            <div align=\"center\">\n                <h1>URLs</h1>\n                <button\n                    onClick={() => this.props.dispatch({ type: 'LOGOUT' })}\n                >\n                    Sign Out\n                </button>\n                <form onSubmit={this.handleFormSubmit}>\n                    <input required value={this.state.originalURL} onChange={this.handleInputChange('originalURL')}></input>\n                    {this.state.showErrorMessage === true && <p>Error: Long URL is not a valid URL</p>}\n                    <button value=\"submit\" type=\"submit\">Create URL</button>\n                </form>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Original URL</th>\n                            <th>Tiny URL</th>\n                            <th>Hit Count</th>\n                        </tr>\n                    </thead>\n                    {this.props.urlData.length > 0 && \n                    <tbody>\n                        {/* setup to map through standard data cells with url data stored in redux state */}\n                        {this.props.urlData.map((url, index) =>\n                            <tr key={index}>\n                                <td>\n                                    <p>{url.original_URL}</p>\n                                </td>\n                                <td>\n                                    <a href={`https://chiisai.herokuapp.com/chiisai/${url.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                                        https://chiisai.herokuapp.com/chiisai/{url.id}        \n                                    </a>\n                                </td>\n                                <td>{url.hit_count}</td>\n                            </tr>\n                        )}\n                    </tbody>}\n                </table>\n            </div>\n        );\n    }\n}\n\n// Instead of taking everything from state, we just want the URL data.\nconst mapStateToProps = state => ({\n    urlData: state.urlData,\n});\n\nexport default connect(mapStateToProps)(TinyURL);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nclass LoginPage extends Component {\n\n    state = {\n        username: '',\n        password: '',\n    };\n\n    login = (event) => {\n        event.preventDefault();\n\n        if (this.state.username && this.state.password) {\n            this.props.dispatch({\n                type: 'LOGIN',\n                payload: {\n                    username: this.state.username,\n                    password: this.state.password,\n                },\n            });\n        } else {\n            this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n        }\n    } // end login\n\n    handleInputChangeFor = propertyName => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    }\n\n    render() {\n\n        return (\n            <div align=\"center\">\n                {this.props.errors.loginMessage && (\n                    <h2\n                    >\n                        {this.props.errors.loginMessage}\n                    </h2>\n                )}\n                <p>\n                    You need to sign in or sign up before continuing.\n                </p>\n\n                <form onSubmit={this.login}>\n                    <h1> Sign In</h1>\n                    <p>Email</p>\n                    <input\n                        required\n                        type=\"email\"\n                        value={this.state.username}\n                        onChange={this.handleInputChangeFor(\"username\")}\n                    />\n                    <p>Password</p>\n                    <input\n                        type=\"password\"\n                        pattern=\".{6,}\"\n                        required title=\"6 characters minimum\"\n                        value={this.state.password}\n                        onChange={this.handleInputChangeFor(\"password\")}\n                    />\n                    <br></br>\n                    <button type=\"submit\" name=\"submit\">\n                        Sign In\n                    </button>\n                </form>\n                <pre></pre>\n\n                <center>\n                    <button\n                        type=\"button\"\n                        onClick={() => {\n                            this.props.dispatch({ type: \"SET_TO_REGISTER_MODE\" });\n                        }}\n                    >\n                        Sign Up\n                    </button>\n                </center>\n            </div >\n        );\n    }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n    errors: state.errors,\n});\n\nexport default withRouter(connect(mapStateToProps)(LoginPage));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nclass SignUp extends Component {\n\n    state = {\n        username: '',\n        password: '',\n        confirmPassword: '',\n    };\n\n    handleInputChangeFor = propertyName => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    }\n\n    registerUser = (event) => {\n        event.preventDefault();\n\n        if (this.state.username && this.state.password && this.state.password === this.state.confirmPassword) {\n            this.props.dispatch({\n                type: 'REGISTER',\n                payload: {\n                    username: this.state.username,\n                    password: this.state.password,\n                },\n            });\n        } else if (this.state.password !== this.state.confirmPassword) {\n            this.props.dispatch({ type: 'REGISTRATION_PASSWORD_ERROR' });\n        } else {\n            this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n        }\n    } // end registerUser\n\n    render() {\n        return (\n            <div align=\"center\">\n                {this.props.errors.registrationMessage && (\n                    <h2\n                    >\n                        {this.props.errors.registrationMessage}\n                    </h2>\n                )}\n                <form onSubmit={this.registerUser}>\n                    <h1>Sign Up</h1>\n                    <p>Email</p>\n                    <input\n                        type=\"email\"\n                        label=\"Email\"\n                        value={this.state.username}\n                        onChange={this.handleInputChangeFor('username')}\n                        required\n                    />\n                    <p>Password <span>(6 character min.)</span></p>\n                    <input\n                        type=\"password\"\n                        pattern=\".{6,}\"   \n                        required title=\"6 characters minimum\"\n                        label=\"Password\"\n                        value={this.state.password}\n                        onChange={this.handleInputChangeFor('password')}\n                    />\n                    <p>Confirm Password</p>\n                    <input\n                        type=\"password\"\n                        pattern=\".{6,}\"   \n                        required title=\"6 characters minimum\"\n                        label=\"confirmPassword\"\n                        value={this.state.confirmPassword}\n                        onChange={this.handleInputChangeFor('confirmPassword')}\n                    />\n                    <br></br>\n                    <button\n                        type=\"submit\"\n                        name=\"submit\"\n                        value=\"Register\"\n                    >\n                        Sign Up\n                    </button>\n\n                </form>\n                <pre></pre>\n                <center>\n                    <button\n                        type=\"button\"\n                        onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n                    >\n                        Sign In\n                </button>\n                </center>\n            </div >\n        );\n    }\n}\n\n// Instead of taking everything from state, we just want the error messages.\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps)(SignUp);","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport Login from \"../Login/Login\";\nimport SignUp from '../SignUp/SignUp';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the Login\n    ComponentToShow = Login;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the SignUpPage\n    ComponentToShow = SignUp;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nclass Chiisai extends Component {\n    componentDidMount() {\n        this.props.dispatch({\n            type: \"REDIRECT_TINY_URL\",\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Chiisai!</h1>\n\n            </div>\n        );\n    }\n}\n\nexport default connect()(Chiisai);","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport TinyURL from \"../TinyURL/TinyURL\"\nimport ProtectedRoute from \"../ProtectedRoute/ProtectedRoute\";\nimport Chiisai from \"../Chiisai/Chiisai\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_USER\" });\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <div>\n            <Switch>\n            {/* <Redirect exact from={`/chiisai/${toString(Number)}`} to=\"/chiisai\" /> */}\n\n              {/* For protected routes, the view could show one of several things on the same route.\n                Visiting localhost:3000/home will show the UserDashboard if the user is logged in.\n                If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n                Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n              <ProtectedRoute path=\"/\" exact component={TinyURL} />\n\n              {/* Unprotected Routes */}\n              {/* <Route path=\"/chiisai\" exact component={Chiisai}/> */}\n\n              {/* If none of the other routes matched, we will show a 404. */}\n              <Route render={() => <h1>404</h1>} />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default connect()(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root')\n);"],"sourceRoot":""}